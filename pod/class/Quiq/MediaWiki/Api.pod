=encoding utf8

=head1 NAME

Quiq::MediaWiki::Api - Clientseitiger Zugriff auf MediaWiki API

=head1 BASE CLASS

L<Quiq::Hash|https://github.com/s31tz/Quiq/tree/master/pod/class/Quiq/Hash.pod>

=head1 DESCRIPTION

Diese Klasse implementiert verschiedene clientseitige Methoden für
den Zugriff auf die serverseitige L<MediaWiki-API|https://www.mediawiki.org/w/api.php?action=help&recursivesubmodules=1>.

Die MediaWiki-API wird über api.php (statt index.php) angesprochen.
Die Doku der API wird angezeigt, wenn api.php ohne Parameter
oder mit "action=help&recursivesubmodules=1" (alles auf einer Seite)
aufgerufen wird.

Die MediaWiki-API empfängt und liefert alle Daten in UTF-8.

=head1 METHODS

=head2 Konstruktor

=head3 new() - Instantiiere MediaWiki-API Client

=head4 Synopsis

    $mwa = $class->new($url,@opt);
    $mwa = $class->new($url,$user,$password,@opt);

=head4 Arguments

=over 4

=item $url

API-URL des MediaWiki, z.B. L<https://en.wikipedia.org/w/api.php>.

=item $user

Benutzername (für automatisches Login statt explizites Login).

=item $password

Passwort (für automatisches Login statt explizites Login).

=back

=head4 Options

=over 4

=item -color => $bool (Default: 1)

Gib die Laufzeitinformation (wird mit -debug=>1 eingeschaltet)
in Farbe aus.

=item -debug => $bool (Default: 0)

Gib Laufzeit-Information wie den Kommunikationsverlauf auf STDERR aus.

=back

=head4 Returns

Client-Objekt

=head4 Description

Instantiiere einen Client für die MediaWiki-API $url und liefere eine
Referenz auf dieses Objekt zurück. Sind Benutzername $user und Passwort
$password angegeben, wird der Benutzer mit dem ersten Request automatisch
eingeloggt. Alternativ kann die Methode $mwa->login() genutzt werden,
um den Benutzer zu einem beliebigen Zeitpunkt einzuloggen.

=head4 Examples

=over 2

=item *

https://www.mediawiki.org/w/api.php

=item *

http://lxv0103.ruv.de:8080/api.php

=back

=head2 Meta-Operationen

=head3 login() - Logge Nutzer ein

=head4 Synopsis

    $res = $mw->login($user,$password);

=head4 Arguments

=over 4

=item $user

Name des Nutzers

=item $password

Passwort des Nutzers

=back

=head4 Description

Logge den Benutzer $user mit Passwort $password auf dem MediaWiki-Server ein.
Alternativ ist ein automatisches Login möglich, siehe Konstruktor.

=head4 Example

    $ perl -MQuiq::MediaWiki::Api -E 'Quiq::MediaWiki::Api->new("http://lxv0103.ruv.de:8080/api.php",-debug=>1)->login("XV882JS","<PASSWORD>")'

=head3 getToken() - Besorge Token für Operation

=head4 Synopsis

    $token = $mwa->getToken($action);

=head4 Arguments

=over 4

=item $action

Operation, für die das Token benötigt wird.

=back

=head4 Description

Besorge vom Server ein Token zum Ausführen von Operation $action und
liefere dieses zurück. Da das Token je Session für alle Seiten identisch
ist, cachen wir die Tokens, so dass nur eine Serveranfrage je
Operationstyp nötig ist.

=head2 Seiten-Operationen

=head3 getPage() - Liefere Seite

=head4 Synopsis

    $pag = $mwa->getPage($pageId,@opt);
    $pag = $mwa->getPage($title,@opt);

=head4 Arguments

=over 4

=item $pageId

Page-Id der Seite.

=item $title

Titel der Seite.

=back

=head4 Options

=over 4

=item -sloppy => $bool (Default: 0)

Wirf keine Exception, wenn die Seite nicht gefunden wird.

=back

=head4 Returns

Page-Objekt (Hash)

=head4 Description

Ermittele die Seite mit der PageId $pageId bzw. dem Titel $title
und liefere diese zurück.

=head3 editPage() - Erzeuge/ändere Seite

=head4 Synopsis

    $res = $mwa->editPage($title,$text);
    $res = $mwa->editPage($pageId,$text);

=head4 Arguments

=over 4

=item $title

Titel der Seite.

=item $pageId

Page-Id der Seite.

=item $text

Text der Seite

=back

=head4 Returns

Response

=head4 Description

Setze den Inhalt der Seite mit dem Titel $title auf Text $text.
Drei Fälle lassen sich unterscheiden:

=over 4

=item 1.

Existiert die Seite nicht, wird sie angelegt.

=item 2.

Existiert die Seite und der Text ist verschieden, wird der
bestehende Text ersetzt.

=item 3.

Existiert die Seite und der Text ist identisch, wird der
Aufruf vom Wiki ignoriert.

=back

=head4 Example

=over 2

=item *

Response nach Neuanlage einer Seite

    $mwa->editPage("XV882JS - API Testseite 8","Ein Text")';

produziert (Log)

    ---JSON---
    \ {
        edit   {
            contentmodel   "wikitext",
            new            "",
            newrevid       13318,
            newtimestamp   "2018-12-27T11:54:51Z",
            oldrevid       0,
            pageid         2446,
            result         "Success",
            title          "XV882JS - API Testseite 8"
        }
    }

=back

=head3 movePage() - Benenne Seite um

=head4 Synopsis

    $res = $mwa->movePage($oldTitle,$newTitle,@opt);
    $res = $mwa->movePage($pageId,$newTitle,@opt);

=head4 Arguments

=over 4

=item $oldTitle

Titel der Seite.

=item $pageId

Page-Id der Seite.

=item $newTitle

Zukünftiger Titel der Seite.

=back

=head4 Options

=over 4

=item -reason => $text

Grund für die Umbenennung.

=item -redirect => $bool (Default: 1)

Erzeuge ein Redirekt von der alten zur neuen Seite.

=back

=head4 Description

Benenne die Seite mit dem Titel $oldTitle bzw. der Page-Id $pageId
in $newTitle um. Die alte Seite existiert weiterhin. Das Wiki
richtet automatisch eine Umleitung von der alten zur neuen Seite ein.

=head3 loadFile() - Lade Seite oder Bilddatei ins Wiki

=head4 Synopsis

    $mwa->loadFile($cacheDir,$file,@opt);

=head4 Arguments

=over 4

=item $cacheDir

Pfad zum Spiegel-Verzeichnis. Der Inhalt des Spiegel-Verzeichnisses wird
von der Methode verwaltet. Es enthält Kopien der geladenen Dateien.

=item $file

Pfad der Datei, die geladen werden soll. Dies kann eine Seitendatei
(*.mw) oder eine sonstige Datei sein (*.png, *.jpg, *.gif, ...),
die über die Upload-Schnittstelle des MediaWiki geladen werden kann.

=back

=head4 Description

# $cacheName
Name für die Seite im Spiegel-Verzeichnis. Dieser Name identifiziert die
Seite im Spiegel-Verzeichnis (und ist nicht zu verwechseln mit dem Titel
der Seite). Der Name $cacheName muss eindeutig sein.

Lade die Seite $input mit dem eindeutigen Namen $cacheName (im
Spiegel-Verzeichnis) ins MediaWiki. Der $cacheName ist nicht zu verwechseln
mit dem Titel der Seite. Der Titel der Seite ist zusammen mit
dem Inhalt der Seite Teil der externen Seitenrepräsentation $input.
Die Methode erkennt, ob die externe Seite $input

=over 2

=item *

bereits im Wiki existiert oder neu angelegt werden muss

=item *

sich der Titel geändert hat -> movePage()

=item *

sich der Inhalt gegenüber dem letzten Stand geändert hat -> editPage()

=item *

eine Änderung im Wiki erfahren hat und diese Änderung in die externe
Seite eingepflegt werden muss -> Fehlermeldung

=back

=head3 siteInfo() - Allgemeine Information über das MediaWiki

=head4 Synopsis

    $res = $mwa->siteInfo;
    $res = $mwa->siteInfo(@properties);

=head4 Arguments

=over 4

=item @properties

Liste der Sysinfo-Properties, die abgefragt werden sollen. Sind keine
Properties angegeben, werden alle (zur Zeit der Implementierung
bekannten) Properties abgefragt.

=back

=head4 Returns

Response

=head4 Example

    $ quiq-mediawiki ruv statistics --debug

=head3 upload() - Lade Datei hoch

=head4 Synopsis

    $res = $mwa->upload($file);

=head4 Arguments

=over 4

=item $file

Pfad der Datei.

=back

=head4 Returns

Response

=head4 Description

Lade die lokale Datei $file über die Upload-Schnittstelle ins
MediaWiki hoch. Dies ist typischerweise eine Bilddatei vom Typ
PNG, JPEG oder GIF.

=head4 See Also

=over 2

=item *

L<API:Upload|https://www.mediawiki.org/wiki/API:Upload>

=item *

L<File Upload per LWP|http://lwp.interglacial.com/ch05_07.htm>

=back

=pod
    # Datei hochladen (wir lesen $file selbst)

    my $p = Quiq::Path->new;
    my $data = $p->read($file);

    # Datei hochladen

    my $filename = $p->filename($file);
    return $self->send('POST','upload',
        token => $token,
        filename => $filename,
        file => [undef,$filename,Content=>$data],
    );
=head2 Kommunikation

=head3 send() - Sende HTTP-Anfrage, empfange HTTP-Antwort

=head4 Synopsis

    $res = $mwa->send($method,$action,@keyVal);

=head4 Arguments

=over 4

=item $method

Die HTTP Request-Methode: 'GET' oder 'POST'.

=item $action

Die Aktion, die ausgeführt werden soll, z.B. 'query'.

=item @keyVal

Die Liste der Schlüssel/Wert-Paare, die an den Server übermittelt werden,
entweder als URL-Parameter im Falle von GET oder im Body des Requests
im Falle von POST.

=back

=head4 Returns

Dekodiertes JSON in UTF-8 als Perl-Hash

=head4 Description

Grundlegende Methode, über die sämtliche Interaktion mit dem
MediaWiki-Server läuft. Die Interaktion besteht in einem Austausch
von Schlüssel/Wert-Paaren via HTTP mittels GET oder POST. Der Client
sendet mit einem Request eine Menge von Schlüssel/Wert-Paaren und erhält
vom Server in der Response eine Menge von Schlüssel/Wert-Paaren zurück.
In beide Richtungen wird UTF-8 Encoding vorausgesetzt. D.h. die
@keyVal-Elemente müssen UTF-8 kodiert sein, die Elemente in der
Response $res sind es ebenfalls.

=head2 Response Handling

=head3 reduceToPage() - Reduziere Seitenliste auf Einzelseite

=head4 Synopsis

    $pag = $mwa->reduceToPage($res);
    $pag = $mwa->reduceToPage($res,$sloppy);

=head4 Arguments

=over 4

=item $res

Response vom Server mit Seitenliste.

=item $sloppy

Wirf keine Exception, wenn keine Seite existiert.

=back

=head4 Returns

Reduzierte Response

=head4 Description

Reduziere die Server-Response $res mit einer Seitenliste der Art

    {
        query => {
            pages => {
                $pageId => {
                     @keyVal
                },
                ...
            },
        }
    }

auf

    {
        @keyVal
    }

also auf ein Element und liefere dieses zurück.

Enthält die Seitenliste mehr als ein Element, oder handelt es sich um
ein ungültiges (als "missing" gekennzeichnetes) Element, wird eine
Exception geworfen.

=head2 Logging

=head3 log() - Schreibe Debug Log

=head4 Synopsis

    $mwa->log($title,$text);

=head4 Description

Schreibe den Text $text unter der Überschrift $title nach STDERR.

=head1 VERSION

1.131

=head1 SEE ALSO

=over 2

=item *

L<https://www.mediawiki.org/wiki/API>

=back

=head1 SOURCE

L<https://github.com/s31tz/Quiq/tree/master/lib/Quiq/MediaWiki/Api.pm>

=head1 AUTHOR

Frank Seitz, L<http://fseitz.de/>

=head1 COPYRIGHT

Copyright (C) 2019 Frank Seitz

=head1 LICENSE

This code is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
